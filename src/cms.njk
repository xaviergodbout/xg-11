---
layout: base.njk
title: x-g.ca | cms
cms: true
---

<section class="cms">
  <h2>/cms</h2>

  <label>PNG File:
    <input type="file" id="imageInput" accept="image/png">
  </label>

  <label>URL:
    <input type="text" id="urlInput">
  </label>

  <label>Name:
    <input type="text" id="nameInput">
  </label>

  <label>Description:
    <input type="text" id="descInput">
  </label>

  <label class="check">
    <input type="checkbox" id="downloadCheckbox"> Mark as download link
  </label>

  <button onclick="generateLink()">Generate</button>

  <div class="output" id="output"></div>
  <button id="copyButton" style="display: none;" onclick="copyToClipboard()">Copy to Clipboard</button>

  <div id="message" style="display:none; margin-top:10px; font-weight:bold;"></div>
</section>

<script>
  let resizedDataURL = '';

  document.getElementById('imageInput').addEventListener('change', function(event) {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = function(e) {
      const img = new Image();
      img.onload = function() {
        const canvas = document.createElement('canvas');
        canvas.width = 32;
        canvas.height = 32;
        const ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0, 32, 32);
        resizedDataURL = canvas.toDataURL('image/png');
      };
      img.src = e.target.result;
    };
    reader.readAsDataURL(file);
  });

  function generateLink() {
    clearErrors();

    const url = document.getElementById('urlInput');
    const name = document.getElementById('nameInput');
    const desc = document.getElementById('descInput');

    let hasError = false;

    if (!url.value.trim()) {
      url.classList.add('error');
      hasError = true;
    }
    if (!name.value.trim()) {
      name.classList.add('error');
      hasError = true;
    }
    if (!resizedDataURL) {
      document.getElementById('imageInput').classList.add('error');
      hasError = true;
    }

    if (hasError) {
      showMessage('❌ Please fill out required fields and upload an image.', 'red', false);
      return;
    }

    const isDownload = document.getElementById('downloadCheckbox').checked;
    const displayName = isDownload ? `↓ ${name.value}` : name.value;

    const descriptionHTML = desc.value.trim() ? `<p>${desc.value}</p>` : '';
    const html = `<a href="${url.value}" class="links" target="_blank"><li><img src="${resizedDataURL}" alt="${name.value} Icon"><span>${displayName}</span>${descriptionHTML}</li></a>`;

    document.getElementById('output').textContent = html;
    document.getElementById('copyButton').style.display = 'inline-block';
    showMessage('✅ Link generated!', 'green', true);
  }

  function copyToClipboard() {
    const output = document.getElementById('output').textContent;
    navigator.clipboard.writeText(output)
      .then(() => showMessage('✅ Copied to clipboard!', 'green', true))
      .catch(() => showMessage('❌ Failed to copy.', 'red', false));
  }

  function showMessage(text, color, autoHide = true) {
    const messageEl = document.getElementById('message');
    messageEl.textContent = text;
    messageEl.style.color = color;
    messageEl.style.display = 'block';

    if (autoHide) {
      clearTimeout(messageEl.hideTimeout);
      messageEl.hideTimeout = setTimeout(() => {
        messageEl.style.display = 'none';
      }, 2500);
    }
  }

  function clearErrors() {
    const inputs = document.querySelectorAll('input[type="text"], input[type="file"]');
    inputs.forEach(input => input.classList.remove('error'));
  }

  const inputsToWatch = document.querySelectorAll('input[type="text"], input[type="file"]');
  inputsToWatch.forEach(input => {
    input.addEventListener('focus', () => {
      document.getElementById('message').style.display = 'none';
      clearErrors();
    });
  });
</script>



